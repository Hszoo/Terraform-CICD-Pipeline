name: Terraform CICD

on:
  push:
    branches: [ staging ]

env:
  AWS_REGION: us-east-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_mysqluser: ${{ secrets.MYSQL_USER }}
  TF_VAR_mysqlpasswd: ${{ secrets.MYSQL_PASSWD }}

jobs:
  full-cicd:
    runs-on: ubuntu-latest

    steps:
      - name: ⚪ Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.3

      # ⚙️ 인프라 프로비저닝
      - name: ⚙️ Apply All Terraform Resources
        run: bash scripts/terraform-apply.sh

      # 📦 Terraform Outputs 가져오기
      - name: 📤 Get Terraform Outputs
        id: tf_outputs
        run: |
          cd cicd
          terraform init -input=false
          terraform output -raw ecr_repository_name > ../ecr_repo.txt
          terraform output -raw s3_bucket_name > ../s3_bucket.txt
          terraform output -raw codedeploy_app_name > ../app_name.txt
          terraform output -raw codedeploy_group_name > ../group_name.txt
        shell: bash

      - name: 🧾 Export Terraform Outputs to Env
        run: |
          echo "ECR_REPO=$(cat ecr_repo.txt)" >> $GITHUB_ENV
          echo "S3_BUCKET=$(cat s3_bucket.txt)" >> $GITHUB_ENV
          echo "CODEDEPLOY_APP=$(cat app_name.txt)" >> $GITHUB_ENV
          echo "CODEDEPLOY_GROUP=$(cat group_name.txt)" >> $GITHUB_ENV

      # 🐳 Docker 빌드 & 배포
      - name: 🐳 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Build Docker image
        run: docker build -t minipro3-server .

      - name: 🐳 Tag Docker image
        run: docker tag minipro3-server ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest

      - name: ☁️ Push Docker image to ECR
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest

      # 📦 배포 번들 압축
      - name: 🧱 Prepare Deployment Bundle
        run: |
          mkdir -p deploy-files
          cp appspec.yml docker-compose.yml Dockerfile -t deploy-files
          cp index.html -t deploy-files
          cp -r scripts deploy-files
          tar -czvf $GITHUB_SHA.tar.gz -C deploy-files .

      # ☁️ S3 업로드
      - name: ☁️ Upload to S3
        run: aws s3 cp ./$GITHUB_SHA.tar.gz s3://${{ env.S3_BUCKET }}/$GITHUB_SHA.tar.gz

      # 🚀 CodeDeploy 배포
      - name: 🚀 Deploy via CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $CODEDEPLOY_GROUP \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location "bucket=$S3_BUCKET,bundleType=tgz,key=$GITHUB_SHA.tar.gz" \
            --region $AWS_REGION