name: Deploy Minipro3 CICD Pipeline (Staging)

on:
  push:
    branches: [ staging ]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: cicd-ecr
  CODEDEPLOY_APP_NAME: minipro3-codedeploy-app
  CODEDEPLOY_GROUP_NAME: minipro3-codedeploy-group
  S3_BUCKET: service-bucket-2000-0903-0909
  DEPLOY_PACKAGE_NAME: deploy-${{ github.sha }}.tar.gz

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: docker build -t $ECR_REPOSITORY:latest .

      - name: Tag image
        run: docker tag $ECR_REPOSITORY:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

      - name: Push image
        run: docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

      - name: Fix permissions
        run: |
          sudo chown -R $(whoami):$(whoami) .
          chmod -R 755 scripts
          chmod 644 docker-compose.yml

      - name: Create deploy bundle
        run: |
          mkdir -p deploy-files
          cp appspec.yml docker-compose.yml Dockerfile -t deploy-files
          cp -r scripts deploy-files
          tar -czvf $DEPLOY_PACKAGE_NAME -C deploy-files .

      - name: Upload to S3
        run: aws s3 cp $DEPLOY_PACKAGE_NAME s3://$S3_BUCKET/$DEPLOY_PACKAGE_NAME

      - name: CodeDeploy deploy
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP_NAME \
            --deployment-group-name $CODEDEPLOY_GROUP_NAME \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=$S3_BUCKET,bundleType=tgz,key=$DEPLOY_PACKAGE_NAME \
            --region $AWS_REGION
